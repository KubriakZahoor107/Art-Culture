generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MUSEUM
  CREATOR
  EDITOR
  AUTHOR
  EXHIBITION
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  role         Role     @default(USER)
  images       String?
  title        String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  country      String?
  house_number String?
  lat          Float?
  lon          Float?
  postcode     String?
  state        String?
  street       String?
  city         String?

  // Реляції
  posts               Post[]             @relation("PostAuthor")
  products            Product[]          @relation("ProductAuthor")
  exhibitionsCreated  Exhibition[]       @relation("UserCreatedExhibitions")
  artTermsCreated     ArtTerm[]          @relation("UserCreatedArtTerms")
  artTermsHighlighted ArtTerm[]          @relation("UserToArtTerms")
  museumLogoImage     MuseumLogoImage?   @relation("UserMuseumLogo")
  museumProducts      Product[]          @relation("MuseumProducts")
  museumExhibitions   Exhibition[]       @relation("MuseumExhibition")
  likesGiven          Like[]             @relation("LikesGiven")
  likesReceived       Like[]             @relation("LikesReceived")
  exhibitionArtists   ExhibitionArtist[] @relation("ExhibitionArtistsUser")

  @@map("users")
}

model Post {
  id         Int        @id @default(autoincrement())
  title_en   String     @db.VarChar(250)
  title_uk   String     @db.VarChar(250)
  content_en String     @db.VarChar(5000)
  content_uk String     @db.VarChar(5000)
  images     String?
  status     PostStatus @default(PENDING)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  authorId Int  @map("author_id")
  author   User @relation("PostAuthor", fields: [authorId], references: [id])

  likes Like[] @relation("LikePost")
}

model Product {
  id             Int           @id @default(autoincrement())
  title_en       String        @db.VarChar(100)
  title_uk       String        @db.VarChar(100)
  description_en String        @db.VarChar(1000)
  description_uk String        @db.VarChar(1000)
  specs_en       String?       @db.VarChar(500)
  specs_uk       String?       @db.VarChar(500)
  size           String?       @db.VarChar(100)
  style_en       String?       @db.VarChar(100)
  style_uk       String?       @db.VarChar(100)
  technique_en   String?       @db.VarChar(100)
  technique_uk   String?       @db.VarChar(100)
  dateOfCreation String?       @db.VarChar(100)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         ProductStatus @default(PENDING)

  authorId Int?  @map("author_id")
  author   User? @relation("ProductAuthor", fields: [authorId], references: [id])

  museumId Int?  @map("museum_id")
  museum   User? @relation("MuseumProducts", fields: [museumId], references: [id])

  images      ProductImage[]      @relation("ProductImages")
  exhibitions ExhibitionProduct[] @relation("ProductExhibitions")
  likes       Like[]              @relation("LikeProduct")
}

model ProductImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id])
}

model Exhibition {
  id             Int      @id @default(autoincrement())
  startDate      DateTime
  endDate        DateTime
  time           String?  @db.VarChar(200)
  endTime        String?  @db.VarChar(200)
  location_en    String?  @db.VarChar(500)
  location_uk    String?  @db.VarChar(500)
  title_en       String?  @db.VarChar(150)
  title_uk       String?  @db.VarChar(150)
  description_en String?  @db.VarChar(500)
  description_uk String?  @db.VarChar(500)
  address        String?
  latitude       Float?
  longitude      Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  createdById Int?  @map("created_by_id")
  createdBy   User? @relation("UserCreatedExhibitions", fields: [createdById], references: [id])

  museumId Int?  @map("museum_id")
  museum   User? @relation("MuseumExhibition", fields: [museumId], references: [id])

  images            ExhibitionImage[]   @relation("ExhibitionImages")
  exhibitionArtists ExhibitionArtist[]  @relation("ExhibitionArtists")
  products          ExhibitionProduct[] @relation("ProductExhibitions")
  likes             Like[]              @relation("LikeExhibition")
}

model ExhibitionProduct {
  exhibitionId Int
  productId    Int

  exhibition Exhibition @relation("ProductExhibitions", fields: [exhibitionId], references: [id])
  product    Product    @relation("ProductExhibitions", fields: [productId], references: [id])

  @@id([exhibitionId, productId])
}

model ExhibitionImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  exhibitionId Int
  exhibition   Exhibition @relation("ExhibitionImages", fields: [exhibitionId], references: [id], onDelete: Cascade)
}

model ExhibitionArtist {
  exhibitionId Int
  artistId     Int

  exhibition Exhibition @relation("ExhibitionArtists", fields: [exhibitionId], references: [id])
  artist     User       @relation("ExhibitionArtistsUser", fields: [artistId], references: [id])

  @@id([exhibitionId, artistId])
}

model ArtTerm {
  id             Int      @id @default(autoincrement())
  title_en       String   @db.VarChar(100)
  title_uk       String   @db.VarChar(100)
  description_en String   @db.Text
  description_uk String   @db.Text
  content_en     String   @db.Text
  content_uk     String   @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  authorId Int  @map("author_id")
  author   User @relation("UserCreatedArtTerms", fields: [authorId], references: [id])

  highlightedProductId Int   @map("highlighted_product_id")
  highlightedById      Int?  @map("highlighted_by_id")
  highlightedBy        User? @relation("UserToArtTerms", fields: [highlightedById], references: [id])
}

model MuseumLogoImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  userId Int  @unique
  user   User @relation("UserMuseumLogo", fields: [userId], references: [id])

  @@map("museum_logo_images")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation("LikesGiven", fields: [userId], references: [id])

  postId Int?
  post   Post? @relation("LikePost", fields: [postId], references: [id])

  productId Int?
  product   Product? @relation("LikeProduct", fields: [productId], references: [id])

  exhibitionId Int?
  exhibition   Exhibition? @relation("LikeExhibition", fields: [exhibitionId], references: [id])

  likedUserId Int?
  likedUser   User? @relation("LikesReceived", fields: [likedUserId], references: [id])
}
