generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                                      Int                @id @default(autoincrement())
  email                                   String             @unique
  password                                String
  role                                    Role               @default(USER)
  images                                  String?
  title                                   String?
  bio                                     String?
  createdAt                               DateTime           @default(now())
  updatedAt                               DateTime           @updatedAt
  country                                 String?
  houseNumber                             String?            @map("house_number")
  lat                                     Float?
  lon                                     Float?
  postcode                                String?
  state                                   String?
  street                                  String?
  city                                    String?
  artTermsCreated                         ArtTerm[]          @relation("UserCreatedArtTerms")
  Exhibition_Exhibition_createdByIdTouser Exhibition[]       @relation("Exhibition_createdByIdTouser")
  Exhibition_Exhibition_museumIdTouser    Exhibition[]       @relation("Exhibition_museumIdTouser")
  exhibitionArtists                       ExhibitionArtist[] @relation("ExhibitionArtistsUser")
  likesReceived                           Like[]             @relation("LikesReceived")
  likesGiven                              Like[]             @relation("LikesGiven")
  posts                                   Post[]             @relation("PostAuthor")
  Product_Product_authorIdTouser          Product[]          @relation("Product_authorIdTouser")
  Product_Product_museumIdTouser          Product[]          @relation("Product_museumIdTouser")
  museum_logo_images                      MuseumLogoImage?

  @@map("user")
}

model Post {
  id            Int        @id @default(autoincrement())
  title_en      String     @db.VarChar(250)
  title_uk      String     @db.VarChar(250)
  content_en    String     @db.VarChar(5000)
  content_uk    String     @db.VarChar(5000)
  authorId      Int        @map("author_id")
  images        String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  creator_id    Int?
  exhibition_id Int?
  museum_id     Int?
  status        PostStatus @default(PENDING)
  likes         Like[]     @relation("LikePost")
  author        User       @relation("PostAuthor", fields: [authorId], references: [id])

  @@index([authorId], map: "Post_author_id_fkey")
}

model Product {
  id                          Int                 @id @default(autoincrement())
  title_en                    String              @db.VarChar(100)
  title_uk                    String              @db.VarChar(100)
  description_en              String              @db.VarChar(1000)
  description_uk              String              @db.VarChar(1000)
  specs_en                    String?             @db.VarChar(500)
  specs_uk                    String?             @db.VarChar(500)
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  authorId                    Int
  museumId                    Int?
  size                        String?             @db.VarChar(100)
  style_en                    String?             @db.VarChar(100)
  style_uk                    String?             @db.VarChar(100)
  technique_en                String?             @db.VarChar(100)
  technique_uk                String?             @db.VarChar(100)
  dateOfCreation              String?             @map("dateofcreation") @db.VarChar(100)
  status                      ProductStatus       @default(PENDING)
  ArtTerm                     ArtTerm[]
  exhibitions                 ExhibitionProduct[] @relation("ProductExhibitions")
  likes                       Like[]              @relation("LikeProduct")
  author                      User?  @relation("Product_authorIdTouser", fields: [authorId], references: [id])
  museum                      User?  @relation("Product_museumIdTouser", fields: [museumId], references: [id])
  images                      ProductImage[]      @relation("ProductImages")

  @@index([authorId], map: "Product_authorId_fkey")
  @@index([museumId], map: "Product_museumId_fkey")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String
  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id])

  @@index([productId], map: "ProductImage_productId_fkey")
}

model Exhibition {
  id                                Int                 @id @default(autoincrement())
  startDate                         DateTime
  endDate                           DateTime
  time                              String?             @db.VarChar(200)
  createdById                       Int
  createdAt                         DateTime            @default(now())
  updatedAt                         DateTime            @updatedAt
  description_en                    String?             @db.VarChar(500)
  description_uk                    String?             @db.VarChar(500)
  location_en                       String?             @db.VarChar(500)
  location_uk                       String?             @db.VarChar(500)
  title_en                          String?             @db.VarChar(150)
  title_uk                          String?             @db.VarChar(150)
  address                           String?
  latitude                          Float?
  longitude                         Float?
  endTime                           String?             @db.VarChar(200)
  museumId                          Int?
  role                              String?
  email                             String?
  bio                               String?
  title                             String?
  user_Exhibition_createdByIdTouser User                @relation("Exhibition_createdByIdTouser", fields: [createdById], references: [id])
  user_Exhibition_museumIdTouser    User?               @relation("Exhibition_museumIdTouser", fields: [museumId], references: [id])
  exhibitionArtists                 ExhibitionArtist[]  @relation("ExhibitionArtists")
  images                            ExhibitionImage[]   @relation("ExhibitionImages")
  products                          ExhibitionProduct[] @relation("ProductExhibitions")
  likes                             Like[]              @relation("LikeExhibition")

  @@index([createdById], map: "Exhibition_createdById_fkey")
  @@index([museumId], map: "Exhibition_museumId_fkey")
}

model ExhibitionProduct {
  exhibitionId Int
  productId    Int
  exhibition   Exhibition @relation("ProductExhibitions", fields: [exhibitionId], references: [id])
  product      Product    @relation("ProductExhibitions", fields: [productId], references: [id])

  @@id([exhibitionId, productId])
  @@index([productId], map: "ExhibitionProduct_productId_fkey")
}

model ExhibitionImage {
  id           Int        @id @default(autoincrement())
  imageUrl     String
  exhibitionId Int
  exhibition   Exhibition @relation("ExhibitionImages", fields: [exhibitionId], references: [id], onDelete: Cascade)

  @@index([exhibitionId], map: "ExhibitionImage_exhibitionId_fkey")
}

model ExhibitionArtist {
  exhibitionId Int
  artistId     Int
  artist       User       @relation("ExhibitionArtistsUser", fields: [artistId], references: [id])
  exhibition   Exhibition @relation("ExhibitionArtists", fields: [exhibitionId], references: [id])

  @@id([exhibitionId, artistId])
  @@index([artistId], map: "ExhibitionArtist_artistId_fkey")
}

model ArtTerm {
  id                   Int      @id @default(autoincrement())
  title_en             String   @db.VarChar(100)
  title_uk             String   @db.VarChar(100)
  description_en       String   @db.Text
  description_uk       String   @db.Text
  content_en           String   @db.Text
  content_uk           String   @db.Text
  authorId             Int      @map("author_id")
  highlightedProductId Int      @map("highlighted_product_id")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  author               User     @relation("UserCreatedArtTerms", fields: [authorId], references: [id])
  Product              Product  @relation(fields: [highlightedProductId], references: [id])

  @@index([authorId], map: "ArtTerm_author_id_fkey")
  @@index([highlightedProductId], map: "ArtTerm_highlighted_product_id_fkey")
}

model MuseumLogoImage {
  id       Int    @id @default(autoincrement())
  imageUrl String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Museum_logo_images_userId_fkey")
  @@map("museum_logo_images")
}

model Like {
  id           Int         @id @default(autoincrement())
  userId       Int
  postId       Int?
  productId    Int?
  exhibitionId Int?
  createdAt    DateTime    @default(now())
  likedUserId  Int?
  exhibition   Exhibition? @relation("LikeExhibition", fields: [exhibitionId], references: [id])
  likedUser    User?       @relation("LikesReceived", fields: [likedUserId], references: [id])
  post         Post?       @relation("LikePost", fields: [postId], references: [id])
  product      Product?    @relation("LikeProduct", fields: [productId], references: [id])
  user         User        @relation("LikesGiven", fields: [userId], references: [id])

  @@index([exhibitionId])
  @@index([likedUserId])
  @@index([postId])
  @@index([productId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
  MUSEUM
  CREATOR
  EDITOR
  AUTHOR
  EXHIBITION
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}
